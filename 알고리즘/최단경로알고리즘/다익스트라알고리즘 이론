'''
[다익스트라 최단 경로 알고리즘 개요]
= '특정한 노드'에서 출발하여 '다른 모든 노드'로 가는 최단 경로를 계산

* 다익스트라 최단 경로 알고리즘은 음의 간선이 없을때 정상적으로 동작
*   현실세계의 도로(간선)은 음의 간선으로 표현되지 않습니다.
* 다익스트라 최단 경로 알고리즘은 '그리디 알고리즘'으로 분류됨
  # '매 상황에서 가장 비용이 적은 노드를 선택'해 임의의 과정을 반복함


< 다익스트라 최단 경로 알고리즘의 동작과정 >
1. 출발 노드를 설정
2. 최단 거리 테이블을 초기화
  # 처음에는 기본적으로 모든 노드까지 가기 위한 비용으로 '무한'으로 초기화 
  # 그리고 자기자신에 대한 노드는 '0'으로 설정(본인부터 본인까지의 거리는 0이니까)
3. 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택(그리디)
4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신
5. 위 과정에서 3번과 4번을 반복

  * 알고리즘 동작 과정에서 최단 거리 테이블은 각 노드에 대한 현재까지의 최단 거리 정보를 가지고 있음
  (처리과정에서 더 짧은 경로를 찾으면 '이제 부터는 이 경로가 제일 짧은 경로야'라고 갱신하기 때문)

  
< 다익스트라 알고리즘의 특징 >
* 그리디 알고리즘이다: '매 상황에서 방문하지 않은 가장 비용이 적은 노드를 선택'해 임의의 과정을 반복하기 때문
* 단계를 거치며 '한 번 처리된 노드의 최단거리는 고정'되어 더 이상 바뀌지 않습니다.
  * 한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것으로 이해할 수 있습니다. 
* 다익스트라 알고리즘을 수행한 뒤에 '테이블에 각 노드까지의 최단 거리 정보가 저장 됨'
  * 완벽한 형태의 최단 경로를 구하려면 소스코드에 추가적인 기능을 더 넣어야 함

* 다익스트라 알고리즘: 간단한 구현 방법
  * 단계마다 방문하지 않은 노드 중에서 
  최단 거리가 가장 짧은 노드를 선택하기 위해 
  '매 단계마다 1차원 테이블의 모든 원소를 확인(순차탐색)'합니다
  # 총 O(V)번에 걸쳐서 최단 거리가 가장 짧은 노드를 매번 '선형 탐색'해야 함
  # 따라서 전체 시간 복잡도는 O(V^2) 입니다
  # 일반적으로 코딩테스트의 최단 경로 문제에서 전체 노드의 개수가 5000개 이하라면 이 코드로 문제를 해결 할 수 있음
  # 하지만 노드의 개수가 10000개를 넘어가는 문제라면? 
  => '우선순위 큐' 자료구조를 사용해야함


< 우선순위 큐 > 
= '우선순위가 가장 높은 데이터를 가장 먼저 삭제'하는 자료구조임
  # 예를들어 여러개의 물건 데이터를 자료구조에 넣었다가 
  # 가치가 높은 물건 데이터부터 꺼내서 확인해야하는 경우에 '우선순위 큐'를 이용할 수 있음

  
[참고]
자료구조       추출되는 데이터
-----------------------------------
스택         가장 나중에 삽입된 데이터
큐           가장 먼저 삽입된 데이터
우선순위 큐    가장 우선 순위가 높은 데이터

  [ 힙 ] 
  => 우선순위 큐를 구현하기 위해 사용하는 자료구조 중 하나
    * '최소 힙'과 '최대 힙'이 있음
    * 다익스트라 최단 경로 알고리즘을 포함해 다양한 알고리즘에서 사용됨
    
      * 우선순위 큐 구현 방식       삽입 시간    삭제 시간
        -----------------------------------------
        리스트                   O(1)       O(N)
        힙                      O(logN)    O(logN)
'''
