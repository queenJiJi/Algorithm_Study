'''
[ 플로이드 워셜 알고리즘 개요 ]
* '모든 노드에서 다른 모든 노드'까지의 최단 경로를 모두 계산
* 플로이드 워셜 알고리즘은 다익스트라 알고리즘과 마찬가지로 단계별로 '거쳐 가는 노드를 기준으로 알고리즘을 수행'
  # 다만 매 단계마다 방문하지 않은 노드 중에 최단 거리를 갖는 노드를 찾는 과정이 필요치 않음
* 플로이드 워셜은 '2차원 테이블'에 최단 거리 정보를 저장
* 플로이드 워셜 알고리즘은 '다이나믹 프로그래밍' 유형에 속함
  # 즉, 점화식 사용해서 테이블을 갱신해주는 것 
* 주로 노드의 갯수가 적을 때 사용 가능, 노드의 갯수가 많으면 다익스트라 알고리즘 사용해야함

[ 플로이드 워셜 알고리즘 ]
# 각 단계마다 '특정한 노드 k를 거쳐 가는 경우를 확인함'
  # a에서 b로 가는 최단거리보다(다익스트라) a에서 'k를 거쳐' b로 가는 거리가 더 짧은지 검사
# 점화식: 
  D_ab = min(D_ab, D_ak + D_kb) 
      # a,b로 가는 거리보다 a에서 k를 거쳐 b로 가는 거리 둘중에 더 작은 값으로 갱신

[ 플로이드 워셜 알고리즘 성능 분석 ]
# 노드의 개수가 N개 일때 알고리즘 상으로 N번의 단계를 수행
  # 각 단계마다 O(N^2)의 연산을 통해 현재 노드를 거쳐 가는 모든 경로를 고려합니다.
# 따라서 플로이드 워셜 알고리즘의 총 시간 복잡도는 O(N^3)입니다.
'''
import sys
sys.stdin = open(
    '/Users/jiyeonpark/Desktop/Python/알고리즘/Algorithm_Study/알고리즘/최단경로알고리즘/input/플워.txt', 'r')
INF = int(1e9)  # 무한을 의미하는 값으로 10억을 설정

# 노드의 개수 및 간선의 개수를 입력받기
n = int(input())
m = int(input())

# 2차원 리스트(그래프 표현)를 만들고, 모든 값을 무한으로 초기화
graph = [[INF]*(n+1) for _ in range(n+1)]

# 자기 자신에서 자기 자신으로 가는 비용은 0으로 초기화
for a in range(1, n+1):
    for b in range(1, n+1):
        if a == b:
            graph[a][b] = 0

# 각 간선에 대한 정보를 입력받아, 그 값으로 초기화
for _ in range(m):
    # A에서 B로 가는 비용은 C라고 설정
    a, b, c = map(int, input().split())
    graph[a][b] = c

# 점화식에 따라 플로이드 워셜 알고리즘을 수행
for k in range(1, n+1):  # k: 거쳐가는 노드
    for a in range(1, n+1):  # a: 출발노드
        for b in range(1, n+1):  # b: 도착노드
            graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])

# 수행된 결과를 출력
for a in range(1, n+1):
    for b in range(1, n+1):
        # 도달할 수 없는 경우, 무한(INFINITY)라고 출력
        if graph[a][b] == INF:
            print('INFINITY')
        else:
            print(graph[a][b], end=' ')
    print()
