# 탐색(search)이란 많은 양의 데이터 중에서 '원하는 데이터를 찾는 과정'
# 대표적인 그래프 탐색 알고리즘으로 : DFS/BFS가 있음

# 스택 자료구조 : 먼저 들어 온 데이터가 나중에 나가는 형식(선입후출)의 자료구조로,
#             입구와 촐구가 동일한 형태로 스택 시각화 할 수 있음(박스쌓기구조)
#   # 삽입(list.append()) - 삭제(list.pop())

# 큐 자료구조: 먼저 들어 온 데이터가 먼저 나가는 형식(선입선출)의 자료주고
#  큐는 입구와 출구가 모두 뚫려있는 터널과 같은 형태로 시각화(대기열같은구조)
#    from collections import deque, queue=deque()
#     삽입(queue.append()) -삭제(queue.popleft())

# 재귀함수: 자기자신을 다시 호출하는 함수
#   DFS를 실질적으로 구현하고자 할 때 자주 사용하는 방법 중 하나임
#   재귀 함수를 문제 풀이에서 사용 할때는 재귀함수의 종료조건을 반드시 명시해야함, otherwwise,, 함수가 무한히 호출
# 재귀함수 사용의 유의사항:
# 재귀함수를 잘 활용하면 복잡한 알고리즘을 간결하게 작성 가능
# 단, 오히려 다른 사람이 이해하기 어려운 형태의 코드가 될 수도 있으므로 신중하게 사용해야함
#   모든 재귀함수는 반복문을 이용하여 동일한 기능을 구현 할 수 있음
#   재귀함수가 반복문보다 유리한 경우도 있고 불리한 경우도 있음
#   컴퓨터가 함수를 연속적으로 호출하면 컴퓨터 메모리 내부의 스택 프레임에 쌓임
# 그래서 스택을 사용해야할 때 구현상 '스택 라이브러리 대신에 재귀함수를 이용'하는 경우도 많음


# DFS : '깊이 우선 탐색' 이라고도 부르며
#        그래프에서 '깊은 부분을 우선적으로 탐색하는 알고리즘'
# '스택자료구조(혹은 재귀함수)를 이용하며, 구체적인 동작 과정은 다음과 같음:
# 1. 탐색 시작노드를 스택에 삽입하고 방문 처리를 합니다.
# 2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면
#    그 노드를 스택에 넣고 방문 처리 합니다.
#    방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼냅니다
# 3. 더 이상 2번의 과정을 수행 할 수 없을 때까지 반복

# BFS : '너비 우선 탐색' 이라고도 부르며
#        그래프에서 '가까운 노드부터 우선적으로 탐색하는 알고리즘'
# '큐 자료구조를 이용하며, 구체적인 동작 과정은 다음과 같음:
# 1. 탐색 시작노드를 큐에 삽입하고 방문 처리를 합니다.
# 2. 큐에서 노드를 꺼낸 뒤에 꺼낸 해당 노드의 인접 노드 중에서 방문하지 않은 노드를
#    모두 큐에 삽입하고 방문 처리 합니다
# 3. 더 이상 2번의 과정을 수행 할 수 없을 때까지 반복
