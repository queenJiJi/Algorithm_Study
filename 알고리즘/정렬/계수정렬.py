# 계수 정렬: 특정한 조건이 부함할 때만 사용할 수 있지만
# '매우 빠르게 동작하는' 정렬 알고리즘
#   계수정렬은 '데이터의 크기 범위가 제한되어 정수로 표현할 수 있을 때' 사용 가능 합니다.
#   즉, 동일한 값을 가지는 데이터가 '여러개' 등장할 때 효과적으로 사용할 수 있음
# 데이터의 개수가: N, 데이터(양수) 중 최댓값이 K일때 최악의 경우에도
# 동작 방식:
# 정렬한 데이터들의 인덱스 값(=원소값)을 매기고
# 그 인덱스 값 밑에 count arr를 두고 해당 값이 몇번 등장하는지 count해줌
# 그럼 결과적으로 최종 리스트에는 각 데이터가 몇번씩 등장했는지 그 횟수가 기록될 것임
# 결과를 확인 할 때, 리스트의 첫번째 데이터부터 하나씩 그 값만큼 반복하여 인덱스를 출력함
# 즉,
# 정렬할 arr: 7 5 9 0 3 1 6 2 9 1 4 8 0 5 2
# 인덱스 0 1 2 3 4 5 6 7 8 9
# 카운트 2 2 2 1 1 2 1 1 1 2
# 출력결과: 0 0 1 1 2 2 3 4 5 5 6 7 8 9 9

# 계수 정렬의 시간복잡도와 공간 복잡도는 모두: O(N+K)를 보장
# 하지만 계수 정렬은 때에 따라서 심각한 비효율성을 최래 할 수 있음
# 데이터가 0과 999,999로 단 2개만 존재하는 경우 : 2개뿐인데 0~999999만큼의 배열을 만들어서 다 0으로 초기화 해줘야함
# 따라서, 계수정렬은 : 동일한 값을 가지는 데이터가 '여러개' 등장할 때 효과적으로 사용할 수 있음
# ex) 성적의 경우 100점을 맞은 학생이 여러명 일 수 있기 때문에 계수 정렬이 효과적


# 모든 원소의 값이 0보다 크거나 같다고 가정(그래야 계수정렬가능)
arr = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]
# 모든 범위를 포함하는 리스트 선언( 모든 값은 0으로 초기화)
count = [0]*(max(arr)+1)

for i in range(len(arr)):
    count[arr[i]] += 1  # 각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)):  # 리스트에 기록된 정렬 정보 확인
    for _ in range(count[i]):  # 그 인덱스의 카운트 갯수 만큼 출력
        print(i, end=' ')  # 띄어쓰기를 구분으로 등장한 횟수만큼 인덱스 출력
