# 문제해결 아이디어:
# i 번째(현재 위치)를 기준으로
# 바로 직전 (i-1)까지의 최적의 해, (i-2)까지의 최적의 해+ 현재식량창고(i)
# 둘 중 더 큰 경우를 고르면 됨

# ai = i번째 식량창고까지의 최적의 해 (얻을 수 있는 식량의 최댓값)
# ki = i번째 식량창고에 있는 식량의 양
# 점화식: ai = max(ai-1, ai-2+ki)
# 한칸 이상 떨어진 식량창고는 항상 털 수 있으므로 (i-3)번째 이하는 고려할 필요 없음
n = int(input())
arr = list(map(int, input().split()))

d = [0]*100  # 앞서 계산된 결과를 저장하기 위한 DP테이블 초기화

# 다이나믹 프로그래밍 진행(보텀업)
d[0] = arr[0]
d[1] = max(arr[0], arr[1])

for i in range(2, n):
    d[i] = max(d[i-1], d[i-2]+arr[i])

# 계산된 결과 출력
print(d[n-1])
