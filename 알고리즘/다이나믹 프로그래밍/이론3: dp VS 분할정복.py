# 다이나믹 프로그래밍 VS 분할 정복(퀵정렬과 같은 것)

# (공)다이나믹 프로그래밍과 분할 정복은 모두 '최적 부분 구조'를 가질 때 사용할 수 있음
#   큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결 할 수 있는 상황
# (차)다이나믹 프로그래밍과 분할 정복의 차이점은 '부분 문제의 중복' 입니다
#   다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복 됨
#   분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않습니다.

# 다이나믹 프로그래밍 문제에 접근하는 방법
# 1. 주어진 문제가 '다이나믹 프로그래밍 유형임을 파악'하는 것이 중요
# 가장 먼저 그리디, 구현, 완전탐색 등의 아이디어로 문제를 해결 할 수 있는지 검토하기
#   다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려
#   작은문제로 큰 문제를 해결할 수 있는 형태를 가지며, 부분문제가 중복되는 특성을 지닌다면 => DP
# 일단 재귀함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에(탑다운)
# 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면,
# 해당 코드에 메모이제이션기법을 추가하여, 한번 계산된 결과가 별도의 리스트 혹은 배열에 담기도록 하여
# 코드를 개선하는 방법을 사용할 수 있음
# 일반적인 코테 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우가 많음
