# 다이나믹 프로그래밍
# 다이나믹 프로그래밍은 '메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법;
# '이미 계산관 결과(작은문제)는 별도의 메모리 영역에 저장하여' 다시 계산하지 않도록 함
# 다이나믹 프로그래밍의 구현은 일반적으로 두가지 방식(탑다운, 보텀업) 으로 구성

# 다이나믹 프로그래밍은 '동적 계획법' 이라고도 함
#   자료구조에서 동적 할당은 '프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법'을 의미
#   반면에, '다이나믹 프로그래밍'에서 나온 '다이나믹'은 별다른 의미없이 사용된 단어임

# 다이나믹 프로그래밍은 문제가 다음의 조건을 만족할 때 사용가능
# 1. 최적 부분 구조
#   큰 문제를 작은 문제로 나눌 수 있으며,
#   작은 문제의 답을 모아서 큰 문제를 해결 가능

# 2. 중복되는 부분 문제
#   동일한 작은 문제를 반복적으로 해결해야 함


# 다이나믹 프로그래밍을 통해서 해결 가능한 대표적인 문제: 피보나치 수열 문제
# 피보나치 수열은 다음과 같은 형태의 수열로, dp로 효과적으로 계산 가능
#   1,1,2,3,5,8,13,21,34,55,89,...
# 점화식 = 인접한 항들 사이의 관계식
# 피보나치 수열을 점화식으로 표현시 : an = an-1+an-2, a1=1, a2=1

# 피보나치 수열 :단순 재귀 소스 코드

# 피보나치 함수를 재귀함수로 구현
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x-1)+fibo(x-2)


print(fibo(4))

# 단, 위처럼 단순 재귀함수로 피보나치 수열을 해결하면 지수 시간 복잡도를 가지게 됨
#   이미 계산되어 있는 것을 또 계산해야하는 문제 발생
# 피보나치 수열의 시간 복잡도: O(2^N) >> 어마어마하게 높음

# 피보나치 수열의 효율적인 해법: 다이나믹 프로그래밍
#   다이나믹프로그래밍의 사용 '조건'을 만족하는 지 확인해보기
#   1. 최적 부분 구조: 큰 문제를 작은 문제로 나눌 수 있다
#   2. 중복되는 부분 문제: 동일한 작문 문제를 반복적으로 해결
# 피보나치 수열은 다이나믹 프로그래밍의 사용 조건을 만족함

# 다이나믹 프로그래밍을 구현하는 방법에는 두가지가 있는데, 그 중 한가지는
#   '메모제이션'
# 메모제이션: '한번 계산한 결과를 메모리 공간에 메모'하는 기법으로 dp를 구현하는 방법 중 하나임
#   같은 문제를 다시  호출하면 메모했던 결과를 그대로 가져옴
#   값을 기록해 놓는다는 점에서 '캐싱'이라고도 함
